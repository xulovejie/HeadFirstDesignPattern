设计原则：类应该对扩展开放，对修改关闭。
目标：允许类容易扩展，在不修改代码的情况下，就可搭配新的行为。
好处：这样的设计具有弹性，可以应对改变，可以接受新的功能来应对改变的需求

1 装饰者和被装饰对象有相同的超类型
2 可以用一个或多个装饰者包装一个对象
3 既然装饰者和被装对象有相同的超类型， 所以在任何需要原始对象（被包装的）的场合，可以用装饰过的对象替代它。
4 装饰者可以在所委托被装饰者的行为之前与之后，加上自己的行为，以达到特定的目的
5 对象可以在任何时候被装饰，所以可以在运行时动态地、不限量地用你喜欢的装饰者类装饰对象

装饰者模式：
	动态地将责任附加到对象上，若要扩展功能，装饰者提供了比继承更有弹性的替代方案。
	
缺点：造成设计中有大量的小类，数量太多