观察者模式（Observer）：
	定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知，并自动更新。
	
实现观察者模式方法不只一种，以包含Subject 和 Observer 接口的类设计的做法最常见。

接口：Subject
方法 ：registerObserver()
			removeObserver()
			notifyObservers()
			
接口：Observer
方法：update()

利用观察者模式，主题是具有状态的对象，并且可以控制着这些状态。
观察者使用这些状态，虽然这些状态不属于他们。
有许多观察者，依赖主题来告诉他们状态何时改变了。

松耦合可以建立弹性的OO系统，能够应对变化，是以为对象之间的互相依赖降到了最低。


当两个对象之间松耦合，它们依然可以交互，但是不太清楚彼此的细节。
观察者模式提供了一种对象设计，让主题和观察者之间松耦合。

设计原则：为了交互对象之间的松耦合设计而努力。